import { H as HexColorLiteral, T as ThemeColorValues, L as LikeC4Theme } from './shared/core.Bhx0OGK8.js';
export { A as AsFqn, k as BorderStyle, B as BorderStyles, w as Color, x as ColorLiteral, C as CustomColor, D as DefaultElementShape, e as DefaultPaddingSize, f as DefaultShapeSize, g as DefaultTextSize, h as DefaultThemeColor, l as Element, i as ElementKind, m as ElementKindSpecification, n as ElementKindSpecificationStyle, o as ElementShape, j as ElementShapes, p as ElementStyle, z as ElementThemeColorValues, y as ElementThemeColors, E as ExclusiveUnion, F as Fqn, I as IconUrl, a as IteratorLike, K as KeysOf, q as Link, c as NTuple, N as NonEmptyArray, b as NonEmptyReadonlyArray, P as Point, d as Predicate, G as RelationshipThemeColorValues, R as RelationshipThemeColors, S as ShapeSize, J as SpacingSize, r as Tag, s as TagSpec, M as TextSize, O as ThemeColor, v as ThemeColors, t as TypedElement, X as XYPoint, u as isThemeColor } from './shared/core.Bhx0OGK8.js';
export { as as AbstractRelation, ag as AndOperator, a5 as AnyParsedLikeC4Model, aT as AutoLayoutDirection, aW as BBox, aU as BasicElementView, aV as BasicView, aX as ComputedDeploymentView, aY as ComputedDynamicView, aZ as ComputedEdge, a_ as ComputedElementView, C as ComputedLikeC4Model, az as ComputedNode, a as ComputedView, a$ as CustomColorDefinitions, A as CustomElementExpr, B as CustomRelationExpr, ap as DefaultArrowType, aq as DefaultLineStyle, ar as DefaultRelationshipColor, b as DeployedInstance, D as DeploymentElement, c as DeploymentElementStyle, d as DeploymentNode, f as DeploymentNodeKind, g as DeploymentNodeKindSpecification, h as DeploymentRef, i as DeploymentRelation, b0 as DeploymentView, b1 as DeploymentViewRule, b2 as DeploymentViewRulePredicate, b3 as DeploymentViewRuleStyle, b4 as DiagramEdge, aA as DiagramNode, b5 as DiagramView, E as DirectRelationExpr, b6 as DynamicView, b7 as DynamicViewIncludeRule, b8 as DynamicViewParallelSteps, b9 as DynamicViewRule, ba as DynamicViewStep, bb as DynamicViewStepOrParallel, bc as EdgeId, F as ElementExpression, G as ElementKindExpr, bw as ElementNotation, H as ElementPredicateExpression, I as ElementRefExpr, J as ElementTagExpr, bd as ElementView, K as ElementWhereExpr, ah as EqualOperator, M as ExpandedElementExpr, e as Expr, N as Expression, X as ExpressionV2, be as ExtendsElementView, ai as Filterable, Y as FqnExpr, Z as FqnRef, a6 as GenericLikeC4Model, $ as GlobalDynamicPredicates, a0 as GlobalPredicateId, a1 as GlobalPredicates, a2 as GlobalStyleID, a3 as GlobalStyles, Q as InOutExpr, O as IncomingExpr, aj as KindEqual, a7 as LayoutedLikeC4Model, a8 as LikeC4ModelDump, L as LikeC4View, a4 as ModelGlobals, at as ModelRelation, bf as NodeId, R as NonWilcard, ak as NotOperator, al as OperatorPredicate, am as OrOperator, S as OutgoingExpr, a9 as ParsedLikeC4Model, P as PredicateSelector, _ as RelationExpr, T as RelationExpression, au as RelationId, U as RelationPredicateExpression, V as RelationWhereExpr, av as RelationshipArrowType, aw as RelationshipKind, ax as RelationshipKindSpecification, ay as RelationshipLineType, bg as ScopedElementView, bh as StepEdgeId, bi as StepEdgeIdLiteral, an as TagEqual, bj as ViewAutoLayout, bk as ViewId, bl as ViewManualLayout, bm as ViewRule, bn as ViewRuleAutoLayout, bo as ViewRuleGlobalPredicateRef, bp as ViewRuleGlobalStyle, bq as ViewRuleGroup, br as ViewRulePredicate, bs as ViewRuleStyle, bt as ViewRuleStyleOrGlobalRef, bu as ViewWithHash, bv as ViewWithNotation, ao as WhereOperator, W as WildcardExpr, aB as extractStep, aC as getBBoxCenter, aD as getParallelStepsPrefix, aa as isAndOperator, aE as isAutoLayoutDirection, j as isCustomElement, k as isCustomRelationExpr, aF as isDeploymentView, aG as isDynamicView, aH as isDynamicViewParallelSteps, l as isElement, m as isElementKindExpr, n as isElementPredicateExpr, o as isElementRef, p as isElementTagExpr, aI as isElementView, q as isElementWhere, r as isExpandedElementExpr, aJ as isExtendsElementView, t as isInOut, s as isIncoming, ab as isKindEqual, ac as isNotOperator, ad as isOrOperator, u as isOutgoing, v as isRelation, w as isRelationExpression, x as isRelationPredicateExpr, y as isRelationWhere, aK as isScopedElementView, aL as isStepEdgeId, ae as isTagEqual, aM as isViewRuleAutoLayout, aN as isViewRuleGlobalPredicateRef, aO as isViewRuleGlobalStyle, aP as isViewRuleGroup, aQ as isViewRulePredicate, aR as isViewRuleStyle, z as isWildcard, aS as stepEdgeId, af as whereOperatorAsPredicate } from './shared/core.C9UbC1nX.js';
export { DefaultMap, DefaultWeakMap, LinkedList, Queue, Stack, commonHead, compareNatural, compareRelations, delay, difference, equalsSet, getOrCreate, hasAtLeast, ifilter, ifind, iflat, imap, intersection, ireduce, isIterable, isNonEmptyArray, isString, isome, iunique, objectHash, stringHash, symmetricDifference, toArray, toSet, union } from './utils/index.js';
export { A as AnyAux, b as Aux, C as ComputeViewResult, d as LikeC4DeploymentModel, L as LikeC4Model, e as LikeC4ViewModel, c as computeView, a as computeViews, u as unsafeComputeView } from './shared/core.k4jahJ8j.js';
export { c as computeRelationshipsView } from './shared/core.DBToPQ3n.js';
export { OverviewGraph, ViewChange } from './types/index.js';
export { I as IterableContainer, R as ReorderedArray, a as ancestorsFqn, c as commonAncestor, b as compareByFqnHierarchically, d as compareFqnHierarchically, h as hierarchyDistance, e as hierarchyLevel, i as isAncestor, f as isDescendantOf, g as isSameHierarchy, n as nameFromFqn, p as parentFqn, s as sortByFqnHierarchically, j as sortNaturalByFqn, k as sortParentsFirst } from './shared/core.BsAIrb_r.js';
import 'type-fest';

declare const ElementColors: {
    readonly primary: {
        fill: "#3b82f6";
        stroke: "#2563eb";
        hiContrast: "#eff6ff";
        loContrast: "#bfdbfe";
    };
    readonly blue: {
        fill: "#3b82f6";
        stroke: "#2563eb";
        hiContrast: "#eff6ff";
        loContrast: "#bfdbfe";
    };
    readonly secondary: {
        fill: "#0284c7";
        stroke: "#0369a1";
        hiContrast: "#f0f9ff";
        loContrast: "#B6ECF7";
    };
    readonly sky: {
        fill: "#0284c7";
        stroke: "#0369a1";
        hiContrast: "#f0f9ff";
        loContrast: "#B6ECF7";
    };
    readonly muted: {
        fill: "#64748b";
        stroke: "#475569";
        hiContrast: "#f8fafc";
        loContrast: "#cbd5e1";
    };
    readonly slate: {
        fill: "#64748b";
        stroke: "#475569";
        hiContrast: "#f8fafc";
        loContrast: "#cbd5e1";
    };
    readonly gray: {
        readonly fill: "#737373";
        readonly stroke: "#525252";
        readonly hiContrast: "#fafafa";
        readonly loContrast: "#d4d4d4";
    };
    readonly red: {
        readonly fill: "#AC4D39";
        readonly stroke: "#853A2D";
        readonly hiContrast: "#FBD3CB";
        readonly loContrast: "#f5b2a3";
    };
    readonly green: {
        readonly fill: "#428a4f";
        readonly stroke: "#2d5d39";
        readonly hiContrast: "#f8fafc";
        readonly loContrast: "#c2f0c2";
    };
    readonly amber: {
        readonly fill: "#A35829";
        readonly stroke: "#7E451D";
        readonly hiContrast: "#FFE0C2";
        readonly loContrast: "#f9b27c";
    };
    readonly indigo: {
        readonly fill: "#6366f1";
        readonly stroke: "#4f46e5";
        readonly hiContrast: "#eef2ff";
        readonly loContrast: "#c7d2fe";
    };
};

declare const RelationshipColors: {
    amber: {
        lineColor: "#b45309";
        labelBgColor: "#78350f";
        labelColor: "#FFE0C2";
    };
    blue: {
        lineColor: "#3b82f6";
        labelBgColor: "#172554";
        labelColor: "#60a5fa";
    };
    gray: {
        lineColor: "#6E6E6E";
        labelBgColor: "#18191b";
        labelColor: "#C6C6C6";
    };
    green: {
        lineColor: "#15803d";
        labelBgColor: "#052e16";
        labelColor: "#22c55e";
    };
    indigo: {
        lineColor: "#6366f1";
        labelBgColor: "#1e1b4b";
        labelColor: "#818cf8";
    };
    muted: {
        lineColor: "#64748b";
        labelBgColor: "#0f172a";
        labelColor: "#cbd5e1";
    };
    primary: {
        lineColor: "#3b82f6";
        labelBgColor: "#172554";
        labelColor: "#60a5fa";
    };
    red: {
        lineColor: "#AC4D39";
        labelBgColor: "#b91c1c";
        labelColor: "#f5b2a3";
    };
    secondary: {
        lineColor: "#0ea5e9";
        labelBgColor: "#082f49";
        labelColor: "#38bdf8";
    };
    sky: {
        lineColor: "#0ea5e9";
        labelBgColor: "#082f49";
        labelColor: "#38bdf8";
    };
    slate: {
        lineColor: "#64748b";
        labelBgColor: "#0f172a";
        labelColor: "#cbd5e1";
    };
};

declare const defaultTheme: LikeC4Theme;
declare function computeColorValues(color: HexColorLiteral): ThemeColorValues;

declare function nonNullable<T>(value: T, message?: string): NonNullable<T>;
declare function invariant(condition: any, message?: string): asserts condition;
declare function nonexhaustive(value: never): never;

export { ElementColors, HexColorLiteral, LikeC4Theme, RelationshipColors, ThemeColorValues, computeColorValues, defaultTheme, invariant, nonNullable, nonexhaustive };
