function nonNullable(value, message) {
  if (typeof value === "undefined" || value == null) {
    throw new Error(message ?? `Expected defined value, but received ${value}`);
  }
  return value;
}
function invariant(condition, message) {
  if (condition) {
    return;
  }
  throw new Error(message ?? "Invariant failed");
}
function nonexhaustive(value) {
  throw new Error(`NonExhaustive value: ${value}`);
}

function u$1(o,n,a){let t=r=>o(r,...n);return a===void 0?t:Object.assign(t,{lazy:a,lazyArgs:n})}

function u(r,n,o){let a=r.length-n.length;if(a===0)return r(...n);if(a===1)return u$1(r,n,o);throw new Error("Wrong number of arguments")}

export { nonNullable as a, invariant as i, nonexhaustive as n, u };
