import { X as XYPoint, N as NonEmptyArray, P as Point, k as BorderStyle, o as ElementShape, O as ThemeColor, F as Fqn } from '../shared/core.Bhx0OGK8.mjs';
export { A as AsFqn, B as BorderStyles, w as Color, x as ColorLiteral, C as CustomColor, D as DefaultElementShape, e as DefaultPaddingSize, f as DefaultShapeSize, g as DefaultTextSize, h as DefaultThemeColor, l as Element, i as ElementKind, m as ElementKindSpecification, n as ElementKindSpecificationStyle, j as ElementShapes, p as ElementStyle, z as ElementThemeColorValues, y as ElementThemeColors, E as ExclusiveUnion, H as HexColorLiteral, I as IconUrl, a as IteratorLike, K as KeysOf, L as LikeC4Theme, q as Link, c as NTuple, b as NonEmptyReadonlyArray, d as Predicate, G as RelationshipThemeColorValues, R as RelationshipThemeColors, S as ShapeSize, J as SpacingSize, r as Tag, s as TagSpec, M as TextSize, T as ThemeColorValues, v as ThemeColors, t as TypedElement, u as isThemeColor } from '../shared/core.Bhx0OGK8.mjs';
import { bk as ViewId, aW as BBox, bl as ViewManualLayout, aT as AutoLayoutDirection } from '../shared/core.BreLKHbT.mjs';
export { as as AbstractRelation, ag as AndOperator, a5 as AnyParsedLikeC4Model, aU as BasicElementView, aV as BasicView, aX as ComputedDeploymentView, aY as ComputedDynamicView, aZ as ComputedEdge, a_ as ComputedElementView, C as ComputedLikeC4Model, az as ComputedNode, a as ComputedView, a$ as CustomColorDefinitions, A as CustomElementExpr, B as CustomRelationExpr, ap as DefaultArrowType, aq as DefaultLineStyle, ar as DefaultRelationshipColor, b as DeployedInstance, D as DeploymentElement, c as DeploymentElementStyle, d as DeploymentNode, f as DeploymentNodeKind, g as DeploymentNodeKindSpecification, h as DeploymentRef, i as DeploymentRelation, b0 as DeploymentView, b1 as DeploymentViewRule, b2 as DeploymentViewRulePredicate, b3 as DeploymentViewRuleStyle, b4 as DiagramEdge, aA as DiagramNode, b5 as DiagramView, E as DirectRelationExpr, b6 as DynamicView, b7 as DynamicViewIncludeRule, b8 as DynamicViewParallelSteps, b9 as DynamicViewRule, ba as DynamicViewStep, bb as DynamicViewStepOrParallel, bc as EdgeId, F as ElementExpression, G as ElementKindExpr, bw as ElementNotation, H as ElementPredicateExpression, I as ElementRefExpr, J as ElementTagExpr, bd as ElementView, K as ElementWhereExpr, ah as EqualOperator, M as ExpandedElementExpr, N as Expression, X as ExpressionV2, be as ExtendsElementView, ai as Filterable, Y as FqnExpr, Z as FqnRef, a6 as GenericLikeC4Model, $ as GlobalDynamicPredicates, a0 as GlobalPredicateId, a1 as GlobalPredicates, a2 as GlobalStyleID, a3 as GlobalStyles, Q as InOutExpr, O as IncomingExpr, aj as KindEqual, a7 as LayoutedLikeC4Model, a8 as LikeC4ModelDump, L as LikeC4View, a4 as ModelGlobals, at as ModelRelation, bf as NodeId, R as NonWilcard, ak as NotOperator, al as OperatorPredicate, am as OrOperator, S as OutgoingExpr, a9 as ParsedLikeC4Model, P as PredicateSelector, _ as RelationExpr, T as RelationExpression, au as RelationId, U as RelationPredicateExpression, V as RelationWhereExpr, av as RelationshipArrowType, aw as RelationshipKind, ax as RelationshipKindSpecification, ay as RelationshipLineType, bg as ScopedElementView, bh as StepEdgeId, bi as StepEdgeIdLiteral, an as TagEqual, bj as ViewAutoLayout, bm as ViewRule, bn as ViewRuleAutoLayout, bo as ViewRuleGlobalPredicateRef, bp as ViewRuleGlobalStyle, bq as ViewRuleGroup, br as ViewRulePredicate, bs as ViewRuleStyle, bt as ViewRuleStyleOrGlobalRef, bu as ViewWithHash, bv as ViewWithNotation, ao as WhereOperator, W as WildcardExpr, aB as extractStep, aC as getBBoxCenter, aD as getParallelStepsPrefix, aa as isAndOperator, aE as isAutoLayoutDirection, j as isCustomElement, k as isCustomRelationExpr, aF as isDeploymentView, aG as isDynamicView, aH as isDynamicViewParallelSteps, l as isElement, m as isElementKindExpr, n as isElementPredicateExpr, o as isElementRef, p as isElementTagExpr, aI as isElementView, q as isElementWhere, r as isExpandedElementExpr, aJ as isExtendsElementView, t as isInOut, s as isIncoming, ab as isKindEqual, ac as isNotOperator, ad as isOrOperator, u as isOutgoing, v as isRelation, w as isRelationExpression, x as isRelationPredicateExpr, y as isRelationWhere, aK as isScopedElementView, aL as isStepEdgeId, ae as isTagEqual, aM as isViewRuleAutoLayout, aN as isViewRuleGlobalPredicateRef, aO as isViewRuleGlobalStyle, aP as isViewRuleGroup, aQ as isViewRulePredicate, aR as isViewRuleStyle, z as isWildcard, aS as stepEdgeId, af as whereOperatorAsPredicate } from '../shared/core.BreLKHbT.mjs';
import 'type-fest';

/**
 * OverviewGraph is a graph representation of all views in a model
 */
declare namespace OverviewGraph {
    type Node = {
        id: string;
        type: 'folder' | 'file';
        path: string;
        label: string;
        parentId: string | null;
        position: XYPoint;
        width: number;
        height: number;
    } | {
        id: string;
        type: 'view';
        viewId: ViewId;
        label: string;
        parentId: string | null;
        position: XYPoint;
        width: number;
        height: number;
    };
    /**
     * Edge represents a navigational link from one view to another
     */
    type Edge = {
        id: string;
        source: string;
        target: string;
        points: NonEmptyArray<Point>;
    };
}
interface OverviewGraph {
    nodes: OverviewGraph.Node[];
    edges: OverviewGraph.Edge[];
    bounds: BBox;
}

declare namespace ViewChange {
    interface ChangeElementStyle {
        op: 'change-element-style';
        style: {
            border?: BorderStyle;
            opacity?: number;
            shape?: ElementShape;
            color?: ThemeColor;
        };
        targets: NonEmptyArray<Fqn>;
    }
    interface SaveManualLayout {
        op: 'save-manual-layout';
        layout: ViewManualLayout;
    }
    interface ChangeAutoLayout {
        op: 'change-autolayout';
        layout: {
            direction: AutoLayoutDirection;
            nodeSep?: number | null;
            rankSep?: number | null;
        };
    }
}
type ViewChange = ViewChange.ChangeElementStyle | ViewChange.SaveManualLayout | ViewChange.ChangeAutoLayout;

export { AutoLayoutDirection, BBox, BorderStyle, ElementShape, Fqn, NonEmptyArray, OverviewGraph, Point, ThemeColor, ViewChange, ViewId, ViewManualLayout, XYPoint };
