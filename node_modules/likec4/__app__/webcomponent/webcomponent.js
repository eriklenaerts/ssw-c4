var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value);
import { jsx } from "react/jsx-runtime";
import { LikeC4ModelProvider, LikeC4View as LikeC4View$1 } from "likec4/react";
import { createRoot } from "react-dom/client";
import { Icons } from "virtual:likec4/icons";
import { likeC4Model } from "virtual:likec4/model";
const ComponentName = {
  View: WEBCOMPONENT_PREFIX + "-view",
  Browser: WEBCOMPONENT_PREFIX + "-browser"
}, RenderIcon = ({ node }) => {
  const IconComponent = Icons[node.icon ?? ""];
  return IconComponent ? /* @__PURE__ */ jsx(IconComponent, {}) : null;
};
function ReactLikeC4View(props) {
  return /* @__PURE__ */ jsx(LikeC4ModelProvider, { likec4model: likeC4Model, children: /* @__PURE__ */ jsx(
    LikeC4View$1,
    {
      renderIcon: RenderIcon,
      ...props
    }
  ) });
}
class LikeC4View extends HTMLElement {
  constructor() {
    super();
    __publicField(this, "rootEl");
    __publicField(this, "shadow");
    __publicField(this, "root");
    __publicField(this, "hostCss");
    __publicField(this, "lastHostCss", "");
    this.shadow = this.attachShadow({ mode: "open", delegatesFocus: !0 });
  }
  updateHostCss() {
    const hostCss = `
    :host {
      display: block;
      position: relative;
      background-color: transparent;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      overflow: hidden;
      border: 0px solid transparent;
      padding: 0;
    }`;
    hostCss !== this.lastHostCss && (this.hostCss?.replaceSync(hostCss), this.lastHostCss = hostCss);
  }
  connectedCallback() {
    this.lastHostCss = "", this.hostCss = new CSSStyleSheet(), this.updateHostCss(), this.shadow.adoptedStyleSheets = [
      this.hostCss
    ], this.render();
  }
  disconnectedCallback() {
    this.root?.unmount(), this.root = void 0, this.shadow.adoptedStyleSheets.length = 0, this.hostCss = void 0;
  }
  // protected get view(): DiagramView {
  //   const viewId = this.getAttribute('view-id') ?? 'index'
  //   let view = LikeC4Views[viewId as LikeC4ViewId]
  //   if (view) {
  //     return view
  //   }
  //   console.error(`Invalid view id: ${viewId},\nAvailable: ${Object.keys(LikeC4Views).join(', ')}`)
  //   view = LikeC4Views['index' as LikeC4ViewId] ?? Object.values(LikeC4Views)[0]
  //   invariant(view, `Empty LikeC4Views`)
  //   console.warn(`LikeC4: Falling back to view: ${view.id}`)
  //   const fallbackViewId = view.id
  //   setTimeout(() => this.setAttribute('view-id', fallbackViewId), 50)
  //   return view
  // }
  render() {
    const viewId = this.getAttribute("view-id") ?? "index", browser = (this.getAttribute("browser") ?? "true") !== "false";
    this.updateHostCss(), this.root ?? (this.root = createRoot(this.shadow)), this.root.render(
      /* @__PURE__ */ jsx(ReactLikeC4View, { viewId, browser })
    );
  }
  // openBrowser(viewId?: ViewId) {
  //   const fs = document.createElement(ComponentName.Browser)
  //   fs.setAttribute('view-id', viewId ?? this.view.id)
  //   document.body.appendChild(fs)
  // }
  attributeChangedCallback(_name) {
    this.root && this.render();
  }
}
__publicField(LikeC4View, "observedAttributes", ["view-id", "browser"]);
customElements.define(ComponentName.View, LikeC4View);
