model {
    extend streamSoftware.customsProduct.consignmentApp.declarationModules {
        service dmBackend "Declaration module backend" {
            technology ".NET"
            icon tech:net-core
            description "Service that generates the declaration XML. It also processes the customs messages."
        }

        container dmBff  "Declaration module BFF" {
            technology ".NET"
            icon tech:net-core
            description "Is both the API as well as the server for frontend app."
        }

        dataStorage declarationMetadata "Declaration metadata" {
            technology "Azure Table storage"
            icon azure:table
            description 'Declarations meta data and feedback.'
        }

        dataStorage auditData "Audit data" {
            technology "Azure Blob storage"
            icon azure:blob-page
            description 'Raw xml messages (both send and received).'
        }

        dataStorage declarationData "Declaration data" {
            technology "Azure Blob storage"
            icon azure:blob-page
            description 'Declaration data in a json format.'
        }

        dmBff -[async]-> dmBackend "Submit declarations" "NServiceBus"
        dmBff -> declarationMetadata "Manage declarations"
        dmBackend -[async]-> streamSoftware.customsProduct.consignmentApp.consignmentBackend "Process declaration messages" "NServiceBus"
        dmBackend -[async]-> streamSoftware.customsProduct.xcomm "Submit declaration"  "NServiceBus" { #future }
        streamSoftware.customsProduct.xcomm -[async]-> dmBackend "Customs messages"  "NServiceBus"  { #future }
        streamSoftware.customsProduct.simulator -[async]-> dmBackend "Simulated customs messages"  "NServiceBus" { #depcrecated }
        dmBackend -[async]-> streamSoftware.customsProduct.simulator "Simulate declaring of goods"  "NServiceBus" { #depcrecated }
        dmBackend -> declarationMetadata "Store declarations"
        dmBff -> declarationData "Store received messages"
        dmBackend -> auditData "Store raw customs messages"
        dmBackend -> streamSoftware.platform.referenceData "Download codelist"
        dmBff -> streamSoftware.platform.referenceData "Download codelist"
    }
}

views {
    view dmBusinessModule of streamSoftware.customsProduct.consignmentApp.declarationModules {
        title "Stream Software - Declaration modules (As Is)"
        description "Shows the various building blocks of the Stream Sowftare declaration module and its interactions."

        include 
            *,
            -> * ->,
            declarationModules._,
            streamSoftware.customsProduct._,
            streamSoftware.consignemntUI,
            streamSoftware.platform._,
            customer,
            customer.person,
            customs._
        

        global predicate as-is
    }           

    view dmBusinessModuleToBe extends dmBusinessModule {
        title "Stream Software - Declaration modules (To Be)"

        include
            streamSoftware.customsProduct.xcomm,
            customs._


        global predicate to-be
    }
}
