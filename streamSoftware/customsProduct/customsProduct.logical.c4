model {
    extend streamSoftware.customsProduct {            
        application consignmentApp "Consignment Application" {
            description "Collection of customs applications and business modules"
        }

        application complianceApp "Compliance Application" {
            #future
            description "Collection of compliance applications and business modules" 
        }

        externalSystem xcomm "XComm" {
            #external #future
            description "External communication system to interconnect with national customs systems"    
            style {
                shape queue
            }
        }

        service simulator "Simulator" {
            #depcrecated
            technology ".NET"
            icon tech:net-core
            description "This service simulates XComm and communication with the national customs system for development and testing purposes."
        }

        consignmentApp -> complianceApp "Check consignment compliancy" { #future }
        consignmentApp -> customer.person "Notify declaration status"  { #future }
        xcomm -> customs.system "Declare goods"  { #future }
        customs -> xcomm "Customs messages" { #future }
        consignmentApp -> customer.person "Notify declaration status"  { #future }

    }
}

views {
    view customsProduct of streamSoftware.customsProduct {
        title 'Stream Software - Customs product (As Is)'
        description 'Shows the customs product with its applications and interactions.'

        include 
            *,
            -> * ->,
            customsProduct._,
            customer.person,
            streamSoftware

        include consignmentApp -> streamSoftware.platform with  {
            title "Relies on"
        }


        exclude 
            element.tag = #support
        
        global predicate as-is
    }

    view customsProductToBe extends customsProduct {
        title 'Stream Software - Customs product (To Be)'

        global predicate to-be
    }
}