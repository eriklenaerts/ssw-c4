model {
    extend streamSoftware.customsProduct.consignmentApp.declarationModules {
        service dmBackend "Declaration module backends" {
            style {
                multiple true
            }    
            technology ".NET"
            icon tech:net-core
            description "Service that generates the declaration XML. It also processes the customs messages."
        }

        container dmBff  "Declaration module BFF's" {
            style {
                multiple true
            }    
            technology ".NET"
            icon tech:net-core
            description "Is both the API as well as the server for frontend app."
        }

        dataStorage declarationMetadata "Declaration metadata" {
            technology "Azure Table storage"
            icon azure:table
            description 'Declarations meta data and feedback.'
        }

        dataStorage auditData "Audit data" {
            technology "Azure Blob storage"
            icon azure:blob-page
            description 'Raw xml messages (both send and received).'
        }

        dataStorage declarationData "Declaration data" {
            technology "Azure Blob storage"
            icon azure:blob-page
            description 'Declaration data in a json format.'
        }

        dmBff -[async]-> dmBackend "Submit declarations" "NServiceBus"
        dmBff -> declarationMetadata "Manage declarations"
        dmBackend -[async]-> streamSoftware.customsProduct.consignmentApp.consignmentBackend "Process declaration messages" "NServiceBus"
        dmBackend -[async]-> streamSoftware.customsProduct.xcomm "Submit declaration"  "NServiceBus"
        streamSoftware.customsProduct.xcomm -[async]-> dmBackend "Customs messages"  "NServiceBus"
        streamSoftware.customsProduct.simulator -[async]-> dmBackend "Customs messages"  "NServiceBus"
        dmBackend -[async]-> streamSoftware.customsProduct.simulator "Simulate declaring of goods"  "NServiceBus"
        dmBackend -> declarationMetadata "Store declarations"
        dmBff -> declarationData "Store received messages"
        dmBackend -> auditData "Store raw customs messages"
        declarationModules -> customs "Declare goods"
    }
}

views {
    view dmsBusinessModule of streamSoftware.customsProduct.consignmentApp.declarationModules {
        title "Stream Software - Declaration modules"
        description "Shows the various building blocks of the Stream Sowftare declaration module and its interactions."

        include 
            *,
            -> * ->,
            streamSoftware.customsProduct,
            streamSoftware.customsProduct.*,
            streamSoftware.consignemntUI,
            streamSoftware.platform,
            streamSoftware.platform.*,
            customs,
            customs.*,
            customer.person
        
        exclude
            streamSoftware.customsProduct.complianceApp,
            declarationModules -> customs,
            streamSoftware.customsProduct.simulator
    }           
}