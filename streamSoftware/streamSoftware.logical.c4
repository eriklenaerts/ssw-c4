model {
    extend streamSoftware {
        staff supportStaff "Support staff" {
            #support
            description "Customer support staff within Stream Software."
        }

        system supportSystem "Customer support system" {
            #support
            description "The system to manage customer support requests, tickets, etc."
        }

        staff productTeam "Product team" {
            description "The team that builds the ."
        }

        platform platform "Platform" {
            description "The streamliner cloud common platform capabilities."
        }

        product customsProduct "Customs product" {
            description "The streamliner cloud product for customs delcarations."
        }

        product logisticsProduct "Logistics, Finance & Accounting product" { #future }

        customsProduct -> platform "Relies on"
        supportStaff -> supportSystem "Uses this to follow up on support cases" { #support}
        supportStaff -> customsProduct "Assist in customer cases" { #support}
    }
}

views {
    view streamSoftware of streamSoftware {
        title "Stream Software landscape (As Is)"
        description 'Shows the systems and products of Stream Sowftare and how they interact with other parties.'

        include 
            *,
            customer.person

        include customer.person -> streamSoftware.customsProduct with  {
            title "Manage and verify declarations"
        }

        global predicate as-is
    }

    view streamSoftwareToBe extends streamSoftware {
        title "Stream Software landscape (To Be)"

        global predicate to-be
    }
}